#! /usr/bin/env python3

BASE = [
    ("Display", ""),
    ("Debug", "?"),
    ("Octal", "o"),
    ("LowerHex", "x"),
    ("UpperHex", "X"),
    ("Pointer", "p"),
    ("Binary", "b"),
    ("LowerExp", "e"),
    ("UpperExp", "E"),
];

PARAMS = [
    # ("#", "f.alternate()"),
    # ("+", "f.sign_plus()"),
    ("0", "f.sign_aware_zero_pad()"),
    ("w$", "w", "let Some(w) = f.width()"),
    (".p$", "p", "let Some(p) = f.precision()"),
]

def generate(base, suffix, params, indent, args = []):
    space = " " * 4 * indent
    if len(params) == 0:
        fmt = f'{{:{base}{suffix}}}'
        print(f'{space}self.fmt_args(&T::fmt, f, format_args!("{fmt}", self.value', end = '')
        for arg in args:
            print(f', {arg}={arg}', end = '')
        print("))")
        return

    param = params[0]
    cond = param[-1]
    print(f'{space}if {cond} {{')
    inner = f'{base}{param[0]}'

    new = args
    if len(param) == 3:
        new = args + [param[1]]

    generate(inner, suffix, params[1:], indent + 1, new)
    print(f'{space}}} else {{')
    generate(base, suffix, params[1:], indent + 1, args)
    print(f'{space}}}')

# generates the full arg version
print('//! Code generated by gen_fmt.py! Do not modify by hand!\n')
print('use core::fmt::{self, *};\n')
print('use crate::Painted;\n')
for base in BASE:
    kind, suffix = base
    print(f'impl<T: {kind}> {kind} for Painted<T> {{')
    print('    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {')
    generate('', suffix, PARAMS, 2)
    print("    }")
    print("}")
    print()

# # generates the basic version which loses format options when wrapping
# for base in BASE:
#     kind, suffix = base
#     print(f'impl<T: {kind}> {kind} for Painted<\'_, T> {{')
#     print('    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {')
#     print(f'        self.fmt_args(&T::fmt, f, format_args!("{{:{suffix}}}", self.value))')
#     print("    }")
#     print("}")
#     print()
#
# def generate_fmt_str(base, suffix, params):
#     if len(params) == 0:
#         base = base if len(suffix) == 0 else f':{base}'
#         print(f'{{{base}{suffix}}}')
#         return
#
#     param = params[0]
#     inner = f'{base}{param[0]}'
#     generate_fmt_str(inner, suffix, params[1:])
#     generate_fmt_str(base, suffix, params[1:])
#
# for base in BASE:
#     kind, suffix = base
#     generate_fmt_str('', suffix, PARAMS)
