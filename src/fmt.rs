//! Code generated by gen_fmt.py! Do not modify by hand!

use core::fmt::{self, *};

use crate::Painted;

impl<T: Display> Display for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:}", self.value))
                }
            }
        }
    }
}

impl<T: Debug> Debug for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$?}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$?}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$?}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0?}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$?}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$?}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$?}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:?}", self.value))
                }
            }
        }
    }
}

impl<T: Octal> Octal for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$o}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$o}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$o}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0o}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$o}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$o}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$o}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:o}", self.value))
                }
            }
        }
    }
}

impl<T: LowerHex> LowerHex for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$x}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$x}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$x}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0x}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$x}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$x}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$x}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:x}", self.value))
                }
            }
        }
    }
}

impl<T: UpperHex> UpperHex for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$X}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$X}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$X}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0X}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$X}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$X}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$X}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:X}", self.value))
                }
            }
        }
    }
}

impl<T: Pointer> Pointer for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$p}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$p}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$p}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0p}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$p}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$p}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$p}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:p}", self.value))
                }
            }
        }
    }
}

impl<T: Binary> Binary for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$b}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$b}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$b}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0b}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$b}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$b}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$b}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:b}", self.value))
                }
            }
        }
    }
}

impl<T: LowerExp> LowerExp for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$e}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$e}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$e}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0e}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$e}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$e}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$e}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:e}", self.value))
                }
            }
        }
    }
}

impl<T: UpperExp> UpperExp for Painted<T> {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        if f.sign_aware_zero_pad() {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$.p$E}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0w$E}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:0.p$E}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:0E}", self.value))
                }
            }
        } else {
            if let Some(w) = f.width() {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$.p$E}", self.value, w=w, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:w$E}", self.value, w=w))
                }
            } else {
                if let Some(p) = f.precision() {
                    self.fmt_args(&T::fmt, f, format_args!("{:.p$E}", self.value, p=p))
                } else {
                    self.fmt_args(&T::fmt, f, format_args!("{:E}", self.value))
                }
            }
        }
    }
}
